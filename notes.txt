CLONING THE GITHUB 

1. TOOLS
VS CODE, CHROME, NODEJS, GIT, GITHUB

2. BACKEND
NODEJS, EXPRESSJS, YARGS(to get the terminal commands)

3. FRONTEND
HTML, CSS, JS, REACT, BOOTSTRAP

4. DATABASE
MONGODB

5. TESTING
JEST

6. DEPLOYMENT
AWS (S3, EC2, AMPLIFY)

Planning the project structure
1. Console commands
2. Frontend Components
3. Database schema and model
4. API Endpoint


CONSOLE COMMANDS 

1. init
2. add file.txt
3. commit <>
4. push
5. pull
6. revert

use the npm package yargs to read console commands

FRONETEND COMPONENTS 

1. Authentication (signup, signin)
2. Dashboard 
3. Repository
4. Issues

SCHEMA AND MODEL 

1. user schema
2. repository schema 
3. issues schema

user -> repository -> issue (dependent setup)

API ENDPOINTS 

user routes :
repository routes :
issue routes :

STARTING THE PROGRAMMING

1. create a folder named backend 
2. in the backend folder (cd backend)
3. initialize a node repo (npm init)
4. in the package.json replace the test script with ("start": "node index.js")
5. create the new file index.js -> this will be the entry file
6. create a folder named config and a file in it named aws-config.js 
7. create a folder named controller and add add, init, commit, pull, push, revert files

do npm install yargs

this is the basic folder structure

in the index.js import yargs 

index.js -> functionality

we have to make all the terminal commands functional
and add the functions that need to be called when user adds to commands the terminal

init.js -> functionality
we have to initialize a new folder for the user and then create a json for the metadata and a folder inside that one for the commits

add.js -> functionality 
we have to get the path of the file from the user and get the name of the file , copy it and pass the file to the staging area